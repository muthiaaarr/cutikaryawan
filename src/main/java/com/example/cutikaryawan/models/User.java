package com.example.cutikaryawan.models;
// Generated Nov 18, 2020 10:06:11 AM by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", schema = "public")
@EntityListeners(AuditingEntityListener.class)
@JsonIgnoreProperties(value = {"createdAt", "updatedAt"})
public class User implements java.io.Serializable {

	private long userId;
	private Position position;
	private String userName;
	private String createdBy;
	private Date createdAt;
	private String updatedBy;
	private Date updatedAt;
	private Set<BucketApproval> bucketApprovals = new HashSet<BucketApproval>(0);
	private Set<UserLeaveRequest> userLeaveRequests = new HashSet<UserLeaveRequest>(0);

	public User() {
	}

	public User(long userId, Position position, String userName, String createdBy, Date createdAt) {
		this.userId = userId;
		this.position = position;
		this.userName = userName;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
	}

	public User(long userId, Position position, String userName, String createdBy, Date createdAt, String updatedBy,
			Date updatedAt, Set<BucketApproval> bucketApprovals, Set<UserLeaveRequest> userLeaveRequests) {
		this.userId = userId;
		this.position = position;
		this.userName = userName;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
		this.updatedBy = updatedBy;
		this.updatedAt = updatedAt;
		this.bucketApprovals = bucketApprovals;
		this.userLeaveRequests = userLeaveRequests;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "generator_user_user_id_2_seq")
	@SequenceGenerator(name = "generator_user_user_id_2_seq", sequenceName = "user_user_id_2_seq", schema = "public", allocationSize = 1)
	@Column(name = "user_id", unique = true, nullable = false)
	public long getUserId() {
		return this.userId;
	}

	public void setUserId(long userId) {
		this.userId = userId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "position_id", nullable = false)
	public Position getPosition() {
		return this.position;
	}

	public void setPosition(Position position) {
		this.position = position;
	}

	@Column(name = "user_name", nullable = false)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "created_by", nullable = false)
	@CreatedBy
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 29)
	@CreatedDate
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Column(name = "updated_by")
	@LastModifiedBy
	public String getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", length = 29)
	@LastModifiedDate
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<BucketApproval> getBucketApprovals() {
		return this.bucketApprovals;
	}

	public void setBucketApprovals(Set<BucketApproval> bucketApprovals) {
		this.bucketApprovals = bucketApprovals;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<UserLeaveRequest> getUserLeaveRequests() {
		return this.userLeaveRequests;
	}

	public void setUserLeaveRequests(Set<UserLeaveRequest> userLeaveRequests) {
		this.userLeaveRequests = userLeaveRequests;
	}

}
